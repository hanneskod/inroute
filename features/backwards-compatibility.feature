Feature: Backwards compatibility
  In order to create http applications
  As a user
  I need to be able run my compiled router after an upgrade

  Scenario: I run a version 1.0.0-beta6 router
    Given a router "BC_1_0_0_beta6\HttpRouter":
    """
    namespace BC_1_0_0_beta6;

    class BcController
    {
        /**
         * @\inroutephp\inroute\Annotations\GET(path="/action")
         * @\inroutephp\inroute\Annotations\Pipe(middlewares="BC_1_0_0_beta6\BcMiddleware")
         */
        function action()
        {
            return new \Zend\Diactoros\Response\TextResponse('action');
        }
    }

    class BcMiddleware implements \Psr\Http\Server\MiddlewareInterface
    {
        public function process(
            \Psr\Http\Message\ServerRequestInterface $request,
            \Psr\Http\Server\RequestHandlerInterface $handler
        ): \Psr\Http\Message\ResponseInterface {
            return new \Zend\Diactoros\Response\TextResponse(
                strtoupper($handler->handle($request)->getBody()->getContents())
            );
        }
    }

    /**
     * NOTE: This file was auto-generated by inroute 1.0.0-beta6 and should not be edited directly.
     */
    final class HttpRouter implements \inroutephp\inroute\Runtime\HttpRouterInterface
    {
        use \inroutephp\inroute\Runtime\Aura\HttpRouterTrait;

        protected function loadRoutes(\Aura\Router\Map $map): void
        {
            \inroutephp\inroute\Package::validateVersion('1.0.0-beta6');

            $mapper = new \inroutephp\inroute\Runtime\Aura\RouteMapper($map);

    $mapper->mapRoute(\Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (\Symfony\Component\VarExporter\Internal\Registry::$prototypes['inroutephp\\inroute\\Runtime\\Route'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('inroutephp\\inroute\\Runtime\\Route')),
        ],
        null,
        [
            'inroutephp\\inroute\\Runtime\\Route' => [
                'name' => [
                    'BC_1_0_0_beta6\\BcController:action',
                ],
                'routable' => [
                    true,
                ],
                'httpMethods' => [
                    [
                        'GET',
                    ],
                ],
                'path' => [
                    '/action',
                ],
                'serviceId' => [
                    'BC_1_0_0_beta6\\BcController',
                ],
                'serviceMethod' => [
                    'action',
                ],
                'middlewareServiceIds' => [
                    [
                        'BC_1_0_0_beta6\\BcMiddleware',
                    ],
                ],
            ],
        ],
        $o[0],
        []
    ));
        }
    }
    """
    When I request "GET" "/action"
    Then the response body is "ACTION"
